package abstraction;

public class Uml {
/**
 * UML : Unified Modeling Language
 * 표준화된 범용 모델링 언어
 *
 * 객체를 모델링할 때 시각적으로 보기 위한 표기법
 *
 * IntelliJ UML 도구 설치하기
 * 파일 > 설정 > 플러그인 > UML로 검색 >
 * Plant UML Intergration 설치
 * Plant UML Parser 설치
 * > 다시시작
 *
 * UML에서 자주 사용하는 다이어그램 => class diagram
 *  - 클래스, 속성(필드), 행위(매서드)로 구분
 *  - 객체지향 -> 사람이 직관적으로 인지하고 이해할 수 있는 방식
 *
 *
 * ## 객체 지향의 추상화 => 모델링
 * 여러가지 사물이나 개념에서 공통적인 특성이나 속성을 추출하여 파악하는 것
 *
 *  클래스 : 같은 특성을 지닌 여러 객체를 총관하는 집합
 *  객체 : 유일무이(unique)한 사물
 *
 *  객체(object)는 class의 인스턴스(실체화)이다
 *
 *  "사람"이라는 클래스를 만들었을 때 사람의 모든 특성을 나열할 필요가 없다.
 *  Context : (애플리케이션의 경계)
 *  내가 만들고자 하는 애플리케이션이 어디서 사용될 것인가?
 *
 *  클래스 다이어그램으로 병원, 은행이라는 상황(context)에 맞게 모델링
 *  모델링 : 구체적인 것을 분해해서 관심영역(앱 경계)에 있는 특성만으로 재조합
 *
 *  1. OOP의 추상화는 모델링이다.
 *  2. 클래스 : 객체 = 펭귄 : 뽀로로 = 사람 : 김종민
 *      - 클래스는 여러 객체를 총칭하는 집합
 *      - 객체는 유일무이한 사물
 *  3. 클래스 설계에서는 추상화가 사용된다.
 *  4. 클래스를 설계하기 위해 앱 경게부터 정해야한다.
 *  5. 추상화의 결과 => 클래스
 *
 *
 * */
}
